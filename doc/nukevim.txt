nukevim.txtFor    Vim version 7.4    Last change: 2016 July 4

=======================================================================

0. Contents                                                   *nukevim*

    1. Overview                                 |nukevim-overview|
    2. Requirements                             |nukevim-requirements|
    3. Installation                             |nukevim-installation|
    4. Preparing Nuke                           |nukevim-nuke|
    5. Configuration Options                    |nukevim-configuration|
    6. Functions                                |nukevim-functions|
    7. Key Mappings                             |nukevim-mappings|
    8. Ex Commands                              |nukevim-commands|
    9. Additional Information                   |nukevim-info|

=======================================================================

1. Overview                                          *nukevim-overview*

   nuke.vim is plugin for the Vim editor that may be used to execute 
   the contents of a Vim buffer, or the current |visual-mode| 
   selection, in The Foundry's Nuke.

   The plugin saves the command(s) to be executed (only python is 
   supported at this time but if TCL would be useful for anyone it's 
   easy to add!) in a temporary file and tells Nuke via a socket 
   connection to source this file. 

=======================================================================

2. Requirements                                  *nukevim-requirements*

   Python support is required for this plugin to run, check with
>
     vim --version
<
   or from within Vim with
>
     :echo has ('python')
<

=======================================================================

3. Installation                                 *nuke.vim-installation*

   You may install nuke.vim directly from a git repository if you
   use 'Pathogen', which you can get here:
>
     http://www.vim.org/scripts/script.php?script_id=2332
<
   Using Pathogen is highly recommend.

   With 'Pathogen' installed, you just need to clone the nuke.vim git
   repository to the bundle directory in your runtime path:
>
     git clone https://github.com/heavyimage/nuke.vim ~/.vim/bundle/
<
   This also allows you to update nuke.vim by pulling the latest version
   with git.

   If using a zip archive: Extract the contents and copy the files
   in the 'doc', 'plugin', 'ftdetect', and 'syntax' subdirectories to 
   the appropriate folders in your runtime path. Usually this is 
   '~/.vim/' (see |'runtimepath'| and |add-global-plugin| for details).
   You may need to create the directories if they do not exist.

   When all files are in place, start Vim and run the |:helptags|
   command to update the tags index (this is not necessary if you use
   the Vimball method).

   See |nukevim-configuration|, |nukevim-functions|, |nukevim-mappings|
   and |nukevim-commands| for details on how to setup and use this 
   plugin.

=======================================================================

4. Preparing Nuke                                        *nukevim-nuke*

   In order to recieve commands from nuke.vim, Nuke will need to start
   a socket server during startup.  nuke.vim is distributed with
   a python script that will open such a server if sourced in a meny.py
   (or hypthoetically in an init.py) file.

   Copy (or symlink, prefered) the nuke/nukevim_server.py file into your
   ~/.nuke directory and source it with:

>
      #Start nukevim server
      import nukevim_server
      nukevim_server.start()
<

   Note that there is no authentication, and so opening this server
   might be a SECURITY RISK! 

=======================================================================

5. Configuration Options                        *nukevim-configuration*

   This plugin uses the following configuration variables; they can be
   set in your |.vimrc| file:

   *g:nukevimHost*                                        *nukevimHost*

     Default: 'localhost'

     String that specifies the address of the host.

   *g:nukevimPort*                                        *nukevimPort*

     Default: 50777

     The port number Nuke is listening on for connections.

   *g:nukevimTempDir*                                  *nukevimTempDir*

     Default: ''

     You may set this to a directory name to change the location of
     the temporary files. If it is an empty string (the default), the
     system's default temporary path will be used, as determined by
     Python's tempfile library. See there for more details.

   *g:nukevimTimeout*                                  *nukevimTimeout*

     Default: 5.0

     The timeout that will be used for the connection. If this is a
     float value, it will be used as is, if it is set to an empty
     string, timeout will be set to None. See the documentation of
     Python's socket library for details on socket.settimeout().

   Example setting in your |.vimrc| file:
>
     let g:nukevimPort=54321
<
   Note that every option is (re)evaluated whenever it is required, so
   changing an option during a session is supported.

=======================================================================

6. Functions                                        *nukevim-functions*

   The nuke.vim plugin defines the following Python functions for 
   public use:

     |NukevimRun()|                                     |nukevimRun|
     |NukevimBuffer()|                                  |nukevimBuffer|

   *vimyaRun* (forceBuffer = False, userCmd = None)        *vimyaRun()*

     If you call this function without any parameters:
>
       :py vimyaRun ()
<
     the complete current buffer will be executed by Maya. The content
     will be saved to a temporary file, and Vimya will send commands to
     Maya's command port to source this file.

     The current buffer's |'filetype'| must be set to either 'python'
     or 'mel', or not set at all ('none'). If it is not set, the option
     |g:vimyaDefaultFiletype| is used to determine the correct commands
     to send. Other file types will cause an error message, no further
     action will be performed in that case.

     In visual mode, only the selected lines will be executed, unless
     you set the forceBuffer parameter to True (it defaults to False):
>
       :py vimyaRun (forceBuffer = True)
<
     In that case the complete buffer will be executed.

     Note: If a selection starts or ends in the middle of a line, the
     complete line will be included!

     If you explicitely specify a command with the userCmd parameter:
>
       :py vimyaRun (userCmd = "<some command>")
<
     the buffer content (and visual selection) is ignored, and only
     this command is executed instead. Obviously, the forceBuffer
     parameter is also ignored in this case. Note that the comamnd will
     still be written to a temporary file first, and then this file
     will be sourced. The current |'filetype'| also determines the type
     of the command, as described above.

     If the 'Tail Bundle' plugin is installed, the output of Maya will
     be written to a temporary log file and this file will be opened in
     a new preview tab (or window, see the |g:vimyaTailCommand| option)
     in Vim, unless this behaviour is disabled by setting the variable
     |g:vimyaShowLog| to 0. See |:TabTail| or |:Tail| if installed. See
     |vimyaResetLog()| and |vimyaOpenLog()| for more details. Also, if
     enabled, after sending the commands to Maya the log buffer will be
     refreshed automatically, see the options |g:vimyaForceRefresh| and
     |g:vimyaRefreshWait| and the |vimyaRefreshLog()| function for more
     details.

     All temporary files will be deleted automatically. The files
     sourced by Maya will be deleted by Maya itself: after the command
     to source the file the
>
       sysFile -delete <temporary file>
<
     MEL command is sent. The temporary logfiles will be deleted when
     Vim is closed, do not delete any of them manually before you close
     Vim. The location of the temporary files depends on your system,
     unless the option |g:vimyaTempDir| is set to override the default.
     See the Python documentation on tempfile.mkstemp() for details.

     Note: Since version 0.2 the plugin keeps track of all temporary
     files and tries to delete them when leaving Vim, since deleting
     with Maya's own commands did not always work reliably.

     The function |vimyaSend()| is used to send all required commands,
     please see there for details on the connection settings.

=======================================================================

7. Key Mappings                                        *vimya-mappings*

   The Vimya plugin will create the following mappings unless you
   configure your own mappings:
>
     nnoremap <leader>sn :py vimyaRun ()<cr>
     vnoremap <leader>sn :py vimyaRun ()<cr>
     nnoremap <leader>sb :py vimyaRun (forceBuffer = True)<cr>
     vnoremap <leader>sb :py vimyaRun (forceBuffer = True)<cr>
<
   See |vimya-functions| above for details on these function. The
   mappings are available in normal and visual mode.

   Note that if you create any custom mapping that contains either the
>
     :py vimyaRun
<
   or the
>
     :py sendBufferToMaya
<
   command the default mappings shown above will not be created!

   See |key-mapping| for details on creating custom key mappings.

=======================================================================

8. Ex Commands                                         *vimya-commands*

   The following commands are defined by Vimya:

     :VimyaRun                                          |:VimyaRun|
     :VimyaBuffer                                       |:VimyaBuffer|
     :VimyaCommand                                      |:VimyaCommand|
     :VimyaSend                                         |:VimyaSend|

   *:VimyaRun*

     Calls the |vimyaRun()| function without any parameters. The
     command itself does not expect any parameters.

   *:VimyaBuffer*

     Calls the |vimyaRun()| function with the forceBuffer parameter set
     to True. The command itself does not expect any parameters.

   *:VimyaCommand* <parameters>

     Calls the |vimyaRun()| function with the userCmd parameter set to
     the parameters of the command.

     Parameters must not be quoted as a whole, Vim will do that.
     However, individual parameters of the command to be sent must be
     quoted as required by MEL or Python! All parameters will be
     concatenated to one single string.

     For example (assuming Python is used for commands):
>
       :VimyaCommand print "a" + "b"
<
     will result in the function call
>
       vimyaRun (userCmd = "print \"a\" + \"b\"")
<
     and this will eventually print the string "ab" in Maya's script
     output. Also see |vimyaRun()| for more details.

   *:VimyaSend* <parameters>

     Works like |:VimyaCommand|, but instead of using |vimyaRun()| the
     command will be sent using the |vimyaSend()| function.

     Please see the notes on parameter quoting and the example for
     |:VimyaCommand|. These notes also apply to :VimyaSend.

     The string built from the command's parameters will be the one
     (and only) element of |vimyaSend|'s commands parameter.

     For example (again, assuming Python is used for commands):
>
       :VimyaSend print "a" + "b"
<
     will result in the function call
>
       vimyaSend (["print \"a\" + \"b\""])
<
   Commands for the other available functions are not defined, but you
   can easily do this in you |.vimrc| file if required.

=======================================================================

9. Additional Information                                  *vimya-info*

   See Vimya's page in the scripts section of the official Vim homepage
   for more information, including links to the bug tracker etc.:
>
     http://www.vim.org/scripts/script.php?script_id=2626
<
   The Git repository is hosted at Bitbucket:
>
     https://bitbucket.org/goeb/vimya/
<
   Feel free to contact the author for any questions, suggestions etc.
   regarding this plugin by mail:
>
     vimya /at/ subtype /dot/ de
<
=======================================================================

 vim:tw=78:sw=4:ft=help:norl:
