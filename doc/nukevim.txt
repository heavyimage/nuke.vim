nukevim.txtFor    Vim version 7.4    Last change: 2016 July 4

=======================================================================

0. Contents                                                   *nukevim*

    1. Overview                                 |nukevim-overview|
    2. Requirements                             |nukevim-requirements|
    3. Installation                             |nukevim-installation|
    4. Preparing Nuke                           |nukevim-nuke|
    5. Configuration Options                    |nukevim-configuration|
    6. Functions                                |nukevim-functions|
    7. Key Mappings                             |nukevim-mappings|
    8. Ex Commands                              |nukevim-commands|
    9. Additional Information                   |nukevim-info|

=======================================================================

1. Overview                                          *nukevim-overview*

   nuke.vim is plugin for the Vim editor that may be used to execute 
   the contents of a Vim buffer, or the current |visual-mode| 
   selection, in The Foundry's Nuke.

   The plugin saves the command(s) to be executed (only python is 
   supported at this time but if TCL would be useful for anyone it's 
   easy to add!) in a temporary file and tells Nuke via a socket 
   connection to source this file. 

   All output (messages from vim to nuke, and mesages returned from
   Nuke) are logged in vim -- simply type ':messages' into the vim
   command line to access the history.

=======================================================================

2. Requirements                                  *nukevim-requirements*

   Python support is required for this plugin to run, check with
>
     vim --version
<
   or from within Vim with
>
     :echo has ('python')
<

=======================================================================

3. Installation                                 *nuke.vim-installation*

   You may install nuke.vim directly from a git repository if you
   use 'Pathogen', which you can get here:
>
     http://www.vim.org/scripts/script.php?script_id=2332
<
   Using Pathogen is highly recommend.

   With 'Pathogen' installed, you just need to clone the nuke.vim git
   repository to the bundle directory in your runtime path:
>
     git clone https://github.com/heavyimage/nuke.vim ~/.vim/bundle/
<
   This also allows you to update nuke.vim by pulling the latest version
   with git.

   If using a zip archive: Extract the contents and copy the files
   in the 'doc', 'plugin', 'ftdetect', and 'syntax' subdirectories to 
   the appropriate folders in your runtime path. Usually this is 
   '~/.vim/' (see |'runtimepath'| and |add-global-plugin| for details).
   You may need to create the directories if they do not exist.

   When all files are in place, start Vim and run the |:helptags|
   command to update the tags index (this is not necessary if you use
   the Vimball method).

   See |nukevim-configuration|, |nukevim-functions|, |nukevim-mappings|
   and |nukevim-commands| for details on how to setup and use this 
   plugin.

=======================================================================

4. Preparing Nuke                                        *nukevim-nuke*

   In order to recieve commands from nuke.vim, Nuke will need to start
   a socket server during startup.  nuke.vim is distributed with
   a python script that will open such a server if sourced in a meny.py
   (or hypthoetically in an init.py) file.

   Copy (or symlink, prefered) the nuke/nukevim_server.py file into your
   ~/.nuke directory and source it with:

>
      #Start nukevim server
      import nukevim_server
      nukevim_server.start()
<

   Note that there is no authentication, and so opening this server
   might be a SECURITY RISK! 

=======================================================================

5. Configuration Options                        *nukevim-configuration*

   This plugin uses the following configuration variables; they can be
   set in your |.vimrc| file:

   *g:nukevimHost*                                        *nukevimHost*

     Default: 'localhost'

     String that specifies the address of the host.

   *g:nukevimPort*                                        *nukevimPort*

     Default: 10191

     The port number Nuke is listening on for connections.

   *g:nukevimTempDir*                                  *nukevimTempDir*

     Default: ''

     You may set this to a directory name to change the location of
     the temporary files. If it is an empty string (the default), the
     system's default temporary path will be used, as determined by
     Python's tempfile library. See there for more details.

   *g:nukevimTimeout*                                  *nukevimTimeout*

     Default: 5.0

     The timeout that will be used for the connection. If this is a
     float value, it will be used as is, if it is set to an empty
     string, timeout will be set to None. See the documentation of
     Python's socket library for details on socket.settimeout().

   Example setting in your |.vimrc| file:
>
     let g:nukevimPort=54321
<
   Note that every option is (re)evaluated whenever it is required, so
   changing an option during a session is supported.

=======================================================================

6. Functions                                        *nukevim-functions*

   The nuke.vim plugin defines the following Python functions for 
   public use:

     |nukevimRun()|                                     |nukevimRun|

   *nukevimRun* (forceBuffer = False)                    *nukevimRun()*

     If you call this function without any parameters:
>
       :py nukevimRun()
<
     Some or all of the current buffer will be executed by Nuke. The 
     content will be saved to a temporary file, and nuke.vim will send 
     commands to Nuke's socket server to source this file.

     In visual mode, only the selected lines will be executed, unless
     you set the forceBuffer parameter to True (it defaults to False):
>
       :py nukevimRun (forceBuffer = True)
<
     In that case the complete buffer will be executed.

     Note: If a selection starts or ends in the middle of a line, the
     complete line will be included!

     The temporary files containing commands will be deleted when Vim
     is closed.  Do not delete any of them manually before you close
     Vim. The location of the temporary files depends on your system,
     unless the option |g:nukevimTempDir| is set to override the 
     default.  See the Python documentation on tempfile.mkstemp() for 
     details.

     The function |nukevimSend()| is used to send all required 
     commands, please see there for details on the connection settings.

=======================================================================

7. Key Mappings                                      *nukevim-mappings*

   The nuke.vim plugin will create the following mappings unless you
   configure your own:
>
     nnoremap <leader>sn :py nukevimRun()<cr>
     vnoremap <leader>sn :py nukevimRun()<cr>
     nnoremap <leader>sb :py nukevimRun(forceBuffer = True)<cr>
     vnoremap <leader>sb :py nukevimRun(forceBuffer = True)<cr>
<
   See |nukevim-functions| above for details on these function. The
   mappings are available in normal and visual mode.

   Note that if you create any custom mapping that contains either the
>
     :py nukevimRun
<
   command the default mappings shown above will not be created!

   See |key-mapping| for details on creating custom key mappings.

=======================================================================

8. Ex Commands                                       *nukevim-commands*

   The following commands are defined by nuke.vim:

     :NukevimRun                                      |:NukevimRun|
     :NukevimBuffer                                   |:NukevimBuffer|

   *:NukevimRun*

     Calls the |nukevimRun()| function without any parameters. The
     command itself does not expect any parameters.

   *:NukevimBuffer*

     Calls the |nukevimRun()| function with the forceBuffer parameter 
     set to True. The command itself does not expect any parameters.

=======================================================================

9. Additional Information                                *nukevim-info*

   See nuke.vim's page on github for more information, including links 
   to the bug tracker etc:

>
     https://github.com/heavyimage/nuke.vim
<

   Feel free to contact the author for any questions, suggestions etc.
   regarding this plugin by mail:

>
     Jesse.Spielman@gmail.com
<
=======================================================================

 vim:tw=78:sw=4:ft=help:norl:
